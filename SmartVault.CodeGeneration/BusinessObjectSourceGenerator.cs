using Microsoft.CodeAnalysis;
using System.Xml.Serialization;
using System.IO;
using System;
using SmartVault.Library;
using System.Linq;
using System.Collections.Generic;

namespace SmartVault.CodeGeneration
{
    [Generator]
    public class BusinessObjectSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            foreach (var file in context.AdditionalFiles)
            {
                var fileContents = file.GetText(context.CancellationToken)?.ToString();
                if (string.IsNullOrEmpty(fileContents))
                {
                    continue;
                }

                var serializer = new XmlSerializer(typeof(BusinessObject));
                using var reader = new StringReader(fileContents);
                var name = Path.GetFileNameWithoutExtension(file.Path);
                var businessObjectModel = (BusinessObject)serializer.Deserialize(reader);

                var type = context.Compilation.GetTypeByMetadataName($"{mainMethod.ContainingNamespace.ToDisplayString()}.BusinessObjects.{name}");
                var existingProperties = new HashSet<string>(type?.GetMembers().OfType<IPropertySymbol>().Select(p => p.Name) ?? Enumerable.Empty<string>());

                string propertiesString = "";
                foreach (var property in businessObjectModel.PropertyGroup.Property)
                {
                    if (!existingProperties.Contains(property.Name))
                    {
                        propertiesString += $"        public {property.Type} {property.Name} {{ get; set; }}{Environment.NewLine}";
                    }
                }

                if (!existingProperties.Contains("CreatedOn"))
                {
                    propertiesString += $"        public DateTime CreatedOn {{ get; set; }} = DateTime.Now;{Environment.NewLine}";
                }

                string businessObjectClassString = $@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}.BusinessObjects
{{
    public partial class {name}
    {{
        {propertiesString}
    }}
}}
";
                context.AddSource($"{name}.generated.cs", businessObjectClassString);
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}
